# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

jobs:
- job: BuildWin
  pool:
    vmImage: 'vs2017-win2016'

  steps:
  - task: UseNode@1
    inputs:
      version: '12.x'

- job: BaseBuild
  timeoutInMinutes: 5
  strategy:
    matrix:
      linux:
        name: 'linux'
        arch: 'x64'
        imageName: 'ubuntu-16.04'
        extension: ''
      mac:
        name: 'mac'
        arch: 'x64'
        imageName: 'macos-10.13'
        extension: ''
      win64:
         name: 'win64'
         arch: 'x64'
         imageName: 'vs2017-win2016'
         extension: '.exe'

  pool:
    vmImage: $(imageName)

  steps:
  - task: UseNode@1
    inputs:
      version: '12.x'

  - task: CmdLine@2
    inputs:
      script: |
        npm install

        npm install nexe --global
        
        nexe index.js --output $(Build.BinariesDirectory)/bin/$(name)/picgo$(extension)

        chmod +x $(Build.BinariesDirectory)/bin/$(name)/picgo$(extension)
        
        $(Build.BinariesDirectory)/bin/$(name)/picgo$(extension) --version
    displayName: 'package'

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(Build.BinariesDirectory)/bin/$(name)/'
      includeRootFolder: true
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/$(name).zip'
      replaceExistingArchive: true

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'picgo-cli'
      publishLocation: 'Container'

  - script: |
      echo "ls System.ArtifactsDirectory"
      ls -a $(System.ArtifactsDirectory)
      echo "ls System.ArtifactStagingDirectory"
      ls -a $(Build.ArtifactStagingDirectory)
      echo "check version"
      $(Build.BinariesDirectory)/bin/$(name)/picgo$(extension) --version
    displayName: 'check result'

- job: Release
  dependsOn: BaseBuild

  steps:
  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: 'current'
      downloadType: 'specific'
      downloadPath: '$(System.ArtifactsDirectory)'

  - script: |
      ls -a $(System.ArtifactsDirectory)
      echo '----'
      ls -a $(System.ArtifactsDirectory)/picgo-cli
    displayName: 'check result'

  - task: GitHubRelease@1
    inputs:
      gitHubConnection: 'github.com_abnerlee'
      repositoryName: '$(Build.Repository.Name)'
      action: 'edit'
      target: '$(Build.SourceVersion)'
      tag: 'latest'
      assetUploadMode: 'replace'
      assets: '$(Build.ArtifactStagingDirectory)/picgo-cli/*'
      changeLogCompareToRelease: 'lastFullRelease'
      changeLogType: 'commitBased'
